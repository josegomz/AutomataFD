/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package automatafd;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Josegomz
 */
public class AFD extends javax.swing.JFrame {
    Dibujo dibujo;// clase que dibujara el AFD
    //contador de estados y de estados finales
    protected int estados;
    int estadosFinales;
    //contador del tamaño del alfabeto
    int tamAlfabeto;
    
    //array que contiene el alfabeto
    String alfabeto[];
    //matriz que tiene la tabla de trancisiones
    int tablaTransiciones[][];
    //array de los estados finales
    int edoFinales[];
    //boleano si es o no determinista
    boolean isDeterminist = true;
    /**
     * Creates new form AFD
     */
    public AFD() {
        initComponents();
        //modifica la tabla
        tblTranciciones.getTableHeader().setDefaultRenderer(new SimpleHeaderRenderer());
        tblTranciciones.setRowHeight(40);
        tblTranciciones.setShowHorizontalLines(true);
        tblTranciciones.setShowVerticalLines(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNodos = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtEdoFinales = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTamAlfabeto = new javax.swing.JTextField();
        btnLlenarValores = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTranciciones = new javax.swing.JTable();
        btnClean = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Automata Finito Determinista");
        setBackground(new java.awt.Color(255, 255, 153));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Estados:");

        txtNodos.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        txtNodos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNodosKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel2.setText("Estados Finales:");

        txtEdoFinales.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        txtEdoFinales.setSelectionEnd(1);
        txtEdoFinales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEdoFinalesKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel4.setText("Tamaño del alfabeto:");

        txtTamAlfabeto.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        txtTamAlfabeto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTamAlfabetoKeyTyped(evt);
            }
        });

        btnLlenarValores.setBackground(new java.awt.Color(153, 204, 255));
        btnLlenarValores.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnLlenarValores.setText("Llenar valores");
        btnLlenarValores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLlenarValoresActionPerformed(evt);
            }
        });

        tblTranciciones.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        tblTranciciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblTranciciones);

        btnClean.setBackground(new java.awt.Color(153, 204, 255));
        btnClean.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnClean.setText("Limpiar pantalla");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(65, 65, 65)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEdoFinales)
                                    .addComponent(txtNodos)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtTamAlfabeto)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLlenarValores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClean, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtEdoFinales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtTamAlfabeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnLlenarValores, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(440, 440, 440)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLlenarValoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLlenarValoresActionPerformed
        
        estados = Integer.parseInt(txtNodos.getText());
        estadosFinales = Integer.parseInt(txtEdoFinales.getText());
        tamAlfabeto = Integer.parseInt(txtTamAlfabeto.getText());
       
        
        edoFinales = new int[estadosFinales];
        alfabeto = new String[tamAlfabeto];
        tablaTransiciones = new int[estados][tamAlfabeto];
        for (int i = 0; i < estadosFinales; i++) {
            edoFinales[i] = Integer.parseInt(JOptionPane.showInputDialog(null,"Inserte el "+(i+1)+"º estado final (0 al "+(estados-1)+")"));
        }
        for (int i = 0; i < tamAlfabeto; i++) {
            alfabeto[i] = JOptionPane.showInputDialog(null,"Inserte el "+(i+1)+"º alfabeto");
        }
        for(int i = 0; i < estados ; i++){
            for(int j = 0 ; j < tamAlfabeto;j++){
                tablaTransiciones[i][j]=Integer.parseInt(JOptionPane.showInputDialog(null,"Inserte el valor de la tabla de transición Q"+i+" -> "+alfabeto[j]));
                
            }
        }
        
        dtm = new DefaultTableModel();
        this.tblTranciciones.setModel(dtm);
        tblTranciciones.getTableHeader().setDefaultRenderer(new SimpleHeaderRenderer());
     
        dtm.addColumn("estados");
        for(int i=0;i<tamAlfabeto;i++){
            dtm.addColumn(alfabeto[i]);
        }
        for(int i = 0; i < estados ; i++){
            String[][] columna = new String[estados][tamAlfabeto+1];
            columna[i][0]= "Q"+i;
            for(int j = 0 ; j < tamAlfabeto;j++){
                columna[i][j+1]="Q"+tablaTransiciones[i][j];
                if(tablaTransiciones[i][j]<0){
                    columna[i][j+1]="";
                }
            }
            dtm.addRow(columna[i]);
            
        }
        
        dibujo= new Dibujo();
        //dibujarlo en la pantalla
        
        
        
        
    }//GEN-LAST:event_btnLlenarValoresActionPerformed

    private void txtNodosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNodosKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtNodosKeyTyped

    private void txtEdoFinalesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEdoFinalesKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtEdoFinalesKeyTyped

    private void txtTamAlfabetoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTamAlfabetoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtTamAlfabetoKeyTyped

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        // TODO add your handling code here:
        txtEdoFinales.setText("");
        txtNodos.setText("");
        txtTamAlfabeto.setText("");
        dtm = new DefaultTableModel();
        tblTranciciones.setModel(dtm);
    }//GEN-LAST:event_btnCleanActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    //javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AFD().setVisible(true);
            }
        });
    }
    
    public class Dibujo {
        //posiciones de los nodos
        int posiciones[][]={{50,200},{200,100},{200,350},{350,100},{350,300},{500,100},{500,350},{650,200}};
        
        //constructor
        public Dibujo(){
            dibujar();  
        }
      
        public void dibujar(){
            JFrame t = new JFrame(); 
            t.add(new JComponent() { 
            private final int ARR_SIZE = 6; 

                //funcion que dibuja una flecha 
                void drawArrow(Graphics g1, int x1, int y1, int x2, int y2,String text) { 
                    Graphics2D g = (Graphics2D) g1.create(); 
                    double dx = x2 - x1, dy = y2 - y1; 
                    double angle = Math.atan2(dy, dx); 
                    int len = (int) Math.sqrt(dx*dx + dy*dy); 
                    AffineTransform at = AffineTransform.getTranslateInstance(x1, y1); 
                    at.concatenate(AffineTransform.getRotateInstance(angle)); 
                    g.transform(at); 
                    g.drawLine(25, -4, len-25, -4); 
                    g.drawString(text, len/2, -8);
                    g.fillPolygon(new int[] {len-25, len-25-ARR_SIZE, len-25-ARR_SIZE, len-25}, 
                    new int[] {-4, -ARR_SIZE-4, ARR_SIZE-4, -4}, 4); 
                }
                
                //dibuja un circulo normal con el nombre de la clase adentro
                public void drawCenteredCircle(Graphics g, int x, int y, int r,String text) {
                    g.drawString(text, x-10, y+5);
                    x = x-(r/2);
                    y = y-(r/2);
                    g.drawOval(x,y,r,r);

                }
                
                //dibuja doble circulo como los estados finales
                public void drawCenteredCircleDouble(Graphics g, int x, int y, int r,String text) {
                    g.drawString(text, x-10, y+5);
                    int x1 = x-(r/2);
                    int x2 = x-((r-4)/2);
                    int y1 = y-(r/2);
                    int y2 = y-((r-4)/2);
                    g.drawOval(x1,y1,r,r);
                    g.drawOval(x2,y2,r-4,r-4);
                }
                
                //cuando funa flecha apunta al mismo nodo
                public void drawArrowCurve(Graphics g1, int x, int y,String text) {
                    BasicStroke wideStroke =new BasicStroke();
                    Graphics2D g = (Graphics2D) g1.create(); 
                    g.setStroke(wideStroke);
                    g.draw(new Arc2D.Double(x-15, y-60,30,40 ,300, 300,Arc2D.OPEN));
                    g.fillRect(x-13, y-28, 7, 7);
                    g.drawString(text, x-15, y-60);
                }
                
                //dibuja los componentes
                public void paintComponent(Graphics g) {  
                    g.setColor(new java.awt.Color(254,254,203));
                    g.fillRect(0, 0, 700, 450);
                    g.setColor(Color.BLACK);
                    //EL ESTADO INICIAL
                    drawArrow(g, -25, 200, 50, 200,""); 
                        
                    //dibujar los nodos
                    for(int i = 0; i<estados;i++){
                        //si no hay estados finales
                        if(estadosFinales<=0){
                            drawCenteredCircle(g, posiciones[i][0],posiciones[i][1], 50,"Q"+i);
                        }
                        //en caso de que si hay
                        else{
                            for(int j=0;j<estadosFinales;j++){
                                if(i==edoFinales[j]){
                                    drawCenteredCircleDouble(g, posiciones[i][0],posiciones[i][1], 50,"Q"+i);
                                }
                                else{
                                    drawCenteredCircle(g, posiciones[i][0],posiciones[i][1], 50,"Q"+i);
                                }
                            } 
                        }
                    }
                    // dibujar las conexiones 
                    for(int i=0; i<estados;i++){
                        //array que guarda el alfabeto que ya se utilizó por nodo
                        boolean usados[]= new boolean[tamAlfabeto];
                        for(int j = 0; j<tamAlfabeto;j++)
                            usados[j]=false;
                        //itera alfabeto por alfabeto
                        for(int j=0;j<tamAlfabeto;j++){
                            String cadenaUnion=alfabeto[j];
                            //si ya se uso un alfabeto en medio o al final ya no se usa de nuevo
                            if(usados[j]==true){
                                continue;
                            }
                            else{
                                //compara si un alfabeto no tiene conectado a un nodo
                                if(tablaTransiciones[i][j]<0){
                                    isDeterminist=false;
                                }
                                else{
                                    //busca si otro alfabeto va hacia el mismo nodo
                                    for(int k=j+1;k<tamAlfabeto;k++){
                                        if(tablaTransiciones[i][j]==tablaTransiciones[i][k]){
                                            cadenaUnion += ","+alfabeto[k];
                                            usados[k]=true;
                                        }
                                    }
                                    //dicho lo contrario
                                    //si el nodo vuelve a si mismo
                                    if(i==tablaTransiciones[i][j]){
                                        drawArrowCurve(g, posiciones[i][0], posiciones[i][1],cadenaUnion); 
                                    }
                                    //si el nodo pasa a otro
                                    else{
                                        drawArrow(g, posiciones[i][0], posiciones[i][1],posiciones[tablaTransiciones[i][j]][0], posiciones[tablaTransiciones[i][j]][1],cadenaUnion); 
                                    }
                                }
                            }
                        }
                    }
                     g.setFont(new Font("TimesRoman", Font.PLAIN, 22));
                    if(isDeterminist){
                        g.setColor(new java.awt.Color(15, 160, 0));
                        g.drawString("Es un automata finito determinista",20 ,20);
                    }else{
                        g.setColor(new java.awt.Color(200, 0, 0));
                        g.drawString("No es un automata finito determinista",20 ,20);
                    }
                    
                    
                    //drawArrowCurve(g, 200, 200,"b");           
                } 
            }); 
            switch(estados){
                case 1:
                    t.setSize(350, 300);
                    break;
                case 2:case 3:
                    t.setSize(400, 300);
                    break;
                    case 4:case 5:
                    t.setSize(550, 450);
                    break;
                default:
                    t.setSize(700, 450); 
                    break;        
            }
            t.setTitle("Automata Finito || grafica");
            //t.setBackground(Color.yellow);
            t.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
            t.setLocationRelativeTo(t);
            t.setVisible(true); 
        } 
    } 
    
    class SimpleHeaderRenderer extends JLabel implements TableCellRenderer {
        public SimpleHeaderRenderer() {
            setFont(new Font("Consolas", Font.BOLD, 16));
            setForeground(Color.BLACK);
            setBorder(BorderFactory.createEtchedBorder());
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value.toString());
            return this;
        }

    }

    //variables
    private DefaultTableModel dtm;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnLlenarValores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTranciciones;
    private javax.swing.JTextField txtEdoFinales;
    private javax.swing.JTextField txtNodos;
    private javax.swing.JTextField txtTamAlfabeto;
    // End of variables declaration//GEN-END:variables
}
